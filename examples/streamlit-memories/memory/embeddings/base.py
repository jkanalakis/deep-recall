"""
Base classes for embedding model interfaces.
This module defines the abstract base classes that all embedding model implementations must follow.
"""

from abc import ABC, abstractmethod
from typing import Any, Dict, List, Optional, Union

import numpy as np


class EmbeddingModel(ABC):
    """Abstract base class for all embedding models."""

    @abstractmethod
    def embed_text(self, text: Union[str, List[str]]) -> np.ndarray:
        """
        Convert text to vector embeddings.

        Args:
            text: Single text or list of texts to embed

        Returns:
            numpy.ndarray: The embedding vectors with shape (batch_size, embedding_dim)
        """
        pass

    @abstractmethod
    def embed_text_async(self, text: Union[str, List[str]]) -> Any:
        """
        Asynchronously convert text to vector embeddings.

        Args:
            text: Single text or list of texts to embed

        Returns:
            Awaitable object that resolves to numpy.ndarray
        """
        pass

    @abstractmethod
    def get_embedding_dim(self) -> int:
        """
        Get the dimension of the embeddings generated by this model.

        Returns:
            int: Dimension of the embedding vectors
        """
        pass


class EmbeddingModelFactory:
    """Factory class to create embedding models based on configuration."""

    @staticmethod
    def create_model(model_type: str, **kwargs) -> EmbeddingModel:
        """
        Create and return an embedding model instance based on the specified type.

        Args:
            model_type: Type of embedding model to create
            **kwargs: Additional configuration parameters for the model

        Returns:
            EmbeddingModel: An instance of the specified embedding model

        Raises:
            ValueError: If the specified model type is not supported
        """
        from memory.embeddings.sentence_transformer import SentenceTransformerModel
        from memory.embeddings.transformer import TransformerEmbeddingModel

        if model_type.lower() == "transformer":
            return TransformerEmbeddingModel(**kwargs)
        elif model_type.lower() == "sentence_transformer":
            return SentenceTransformerModel(**kwargs)
        else:
            raise ValueError(f"Unsupported embedding model type: {model_type}")
