name: CD - Build Images

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build images for'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      tag:
        description: 'Image tag (defaults to short SHA or tag name)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  ORGANIZATION: ${{ github.repository_owner }}

jobs:
  build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
      
      - name: Extract metadata for images
        id: meta
        run: |
          # Set image tag based on input, git tag, or sha
          if [[ "${{ github.event.inputs.tag }}" != "" ]]; then
            IMAGE_TAG="${{ github.event.inputs.tag }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            IMAGE_TAG="${{ github.ref_name }}"
          else
            IMAGE_TAG="${{ github.sha }}"
            # Use short commit SHA
            IMAGE_TAG="${IMAGE_TAG:0:7}"
          fi
          
          # Determine environment
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            ENV="prod"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            ENV="prod"
          else
            ENV="dev"
          fi
          
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${ENV}" >> $GITHUB_ENV
          
          MEMORY_SERVICE_IMG="${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/deep-recall-memory"
          INFERENCE_SERVICE_IMG="${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/deep-recall-inference"
          INFERENCE_CPU_IMG="${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/deep-recall-inference-cpu"
          ORCHESTRATOR_SERVICE_IMG="${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/deep-recall-orchestrator"
          
          echo "MEMORY_SERVICE_IMG=${MEMORY_SERVICE_IMG}" >> $GITHUB_ENV
          echo "INFERENCE_SERVICE_IMG=${INFERENCE_SERVICE_IMG}" >> $GITHUB_ENV
          echo "INFERENCE_CPU_IMG=${INFERENCE_CPU_IMG}" >> $GITHUB_ENV
          echo "ORCHESTRATOR_SERVICE_IMG=${ORCHESTRATOR_SERVICE_IMG}" >> $GITHUB_ENV
      
      - name: Build and push Memory Service image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployments/docker/Dockerfile.memory
          push: true
          tags: ${{ env.MEMORY_SERVICE_IMG }}:${{ env.IMAGE_TAG }},${{ env.MEMORY_SERVICE_IMG }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Inference Service image (GPU)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployments/docker/Dockerfile.inference
          push: true
          tags: ${{ env.INFERENCE_SERVICE_IMG }}:${{ env.IMAGE_TAG }},${{ env.INFERENCE_SERVICE_IMG }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Inference Service image (CPU)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployments/docker/Dockerfile.inference-cpu
          push: true
          tags: ${{ env.INFERENCE_CPU_IMG }}:${{ env.IMAGE_TAG }},${{ env.INFERENCE_CPU_IMG }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Orchestrator Service image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployments/docker/Dockerfile.orchestrator
          push: true
          tags: ${{ env.ORCHESTRATOR_SERVICE_IMG }}:${{ env.IMAGE_TAG }},${{ env.ORCHESTRATOR_SERVICE_IMG }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Summary
        run: |
          echo "## Build Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "Environment: **${{ env.ENVIRONMENT }}**" >> $GITHUB_STEP_SUMMARY
          echo "Tag: **${{ env.IMAGE_TAG }}**" >> $GITHUB_STEP_SUMMARY
          echo "### Images:" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.MEMORY_SERVICE_IMG }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.INFERENCE_SERVICE_IMG }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.INFERENCE_CPU_IMG }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.ORCHESTRATOR_SERVICE_IMG }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY 